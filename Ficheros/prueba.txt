/* Se debe editar el fichero para hacer las siguientes modificaciones: 
//  + cambiarlo por uno de los operadores aritméticos implementados
//	< cambiarlo por uno de los operadores relacionales implementados 
//  && cambiarlo por uno de los operadores lógicos implementados
//  " cambiarlas por ' si se han implementado estas cadenas
//   ++ cambiar la sentencia por una sentencia con el operador especial implementado
//  cambiar los indicadores de comentario por el implementado
//  en la función sent, dejar solamente el tipo de bucle implementado y borrar los otros dos, o sustituirlo por un if-else o switch
//  cambiar los comentarios por el tipo de comentario implementado
*/

let int kk;
let boolean bb;
let string s1;

function imprime (int kk, int s1)
{
	print (kk);
	print (' #');
	if (0 < s1)	/* Cuando s1 valga 0, esta expresión debe evaluarse como falsa y cuando sea positivo, debe evaluarse como verdadera */
	   print (s1);
	print ('. ');
}

s1 = 'introduce un digito. ';

function  sent int (string s)
{
	let string ss;
	ss=s;
	let int iii;
	iii= kk;
	jj= iii;
	pp= 1;
	let int kk;
	kk= 33;
	input (ss);
	s1=ss;
	print (s); print (s1);
	while (bb && (iii < kk))	/* cambiar la lógica de la condición del bucle para que no sea un bucle infinito, pero conservando un operador relacional y un operador lógico. Tener en cuenta la actualización de iii dentro del bucle. */
	{
		if (bb) imprime (iii, 0);
		pp %= 2;
        iii = iii + pp;
	}
	return jj;
}

function  Recursivo int (int nnn)	
{
	let int resul;
	kk= kk + 11;
	imprime (nnn, kk);
	if (1 < nnn)	return 1;	/* poner la condición para que se cumpla tras 3 o 4 iteraciones */
	resul = nnn + Recursivo (nnn + pp);	
	imprime (nnn, kk);
	return resul;
}

bb= 0 < 5; /* cambiar los valores para que bb siempre valga true en función del operador */
print (s1);
input (kk);
print ('Escribe tu nombre. ');
imprime (sent('Hola, '), 0);
kk=11;
imprime (Recursivo(jj), kk);
print ('Adios, ');
print (s1);


